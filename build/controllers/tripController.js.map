{"version":3,"sources":["../../server/controllers/tripController.js"],"names":["Trip","createTrip","req","res","body","bus_id","origin","destination","trip_date","fare","formatted_date","format","status","json","error","values","checkbus","text","pool","query","rows","rowsInsert","data","trip_id","id","getAllTrips","authenticateTrip","tripGetter","details","message","getOrigin","orijin","getDestination","destine","getTrips","cancelTrip","params","tripId","checkTrip","updateTrip"],"mappings":"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","sourcesContent":["/* eslint-disable indent */\r\n/* eslint-disable camelcase */\r\nimport moment from 'moment';\r\nimport pool from '../models/db/db';\r\nimport authenticateTrip from '../helpers/authenticateTrip';\r\n\r\nconst Trip = {\r\n\r\n  async createTrip(req, res) {\r\n    const createTrip = `INSERT INTO trip ( bus_id, origin, destination, trip_date, fare) VALUES($1, $2, $3, $4, $5)\r\n    RETURNING *`;\r\n    const { bus_id, origin, destination, trip_date, fare } = req.body;\r\n    const formatted_date = moment(trip_date).format('YYYY-MM-DD');\r\n    if (formatted_date === 'Invalid date') {\r\n      return res.status(406).json({\r\n        status: 406,\r\n        error: 'Please input date in YYYY-MM-DD format',\r\n      });\r\n    }\r\n    const values = [bus_id, origin, destination, formatted_date, fare];\r\n    const checkbus = {\r\n      text: 'SELECT * FROM bus WHERE id = $1',\r\n      values: [bus_id],\r\n    };\r\n    const { rows } = await pool.query(checkbus);\r\n\r\n    if (!rows[0]) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        error: 'Bus not available',\r\n      });\r\n    }\r\n    try {\r\n      const { rows: rowsInsert } = await pool.query(createTrip, values);\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          trip_id: rowsInsert[0].id,\r\n          bus_id: rows[0].id,\r\n          origin: rowsInsert[0].origin,\r\n          destination: rowsInsert[0].destination,\r\n          trip_date: rowsInsert[0].formatted_date,\r\n          fare: rowsInsert[0].fare,\r\n          status: rowsInsert[0].status,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      return res.status(500).json({ status: 'error', error: 'Internal server error' });\r\n    }\r\n  },\r\n\r\n  async getAllTrips(req, res) {\r\n    const { error } = authenticateTrip.tripGetter(req.body);\r\n    if (error) return res.status(400).json({ status: 400, error: error.details[0].message });\r\n\r\n    try {\r\n      const { origin, destination } = req.query;\r\n      if (origin) {\r\n        const getOrigin = {\r\n          text: 'SELECT * FROM trip WHERE origin = $1',\r\n          values: [origin],\r\n        };\r\n        const { rows: orijin } = await pool.query(getOrigin);\r\n        if (!orijin[0]) {\r\n          return res.status(404).json({\r\n            status: 404,\r\n            error: 'No available trip',\r\n          });\r\n        }\r\n        return res.status(200).json({\r\n          status: 'success',\r\n          data: orijin,\r\n        });\r\n      }\r\n      if (destination) {\r\n        const getDestination = {\r\n          text: 'SELECT * FROM trip WHERE destination = $1',\r\n          values: [destination],\r\n        };\r\n        const { rows: destine } = await pool.query(getDestination);\r\n        if (!destine[0]) {\r\n          return res.status(404).json({\r\n            status: 404,\r\n            error: 'No available trip',\r\n          });\r\n        }\r\n        return res.status(200).json({\r\n          status: 'success',\r\n          data: destine,\r\n        });\r\n      }\r\n      const getTrips = { text: 'SELECT * FROM trip' };\r\n      const { rows } = await pool.query(getTrips);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'No available trip',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: rows,\r\n      });\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n  async cancelTrip(req, res) {\r\n    try {\r\n      const { tripId } = req.params;\r\n      const checkTrip = {\r\n        text: 'SELECT * FROM trip WHERE id = $1 and status = $2',\r\n        values: [tripId, 'active'],\r\n      };\r\n      const { rows } = await pool.query(checkTrip);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({\r\n          status: 400,\r\n          error: 'Not an active trip',\r\n        });\r\n      }\r\n      const updateTrip = {\r\n        text: \"UPDATE trip SET status = 'cancelled' WHERE id = $1\",\r\n        values: [tripId],\r\n      };\r\n      await pool.query(updateTrip);\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          message: 'Trip cancelled successfully',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n};\r\n\r\n\r\nexport default Trip;\r\n"],"file":"tripController.js"}