{"version":3,"sources":["../../server/controllers/bookController.js"],"names":["Book","makeBooking","req","res","user","email","id","body","trip_id","seat_number","Math","floor","random","checkUser","pool","query","rows","status","json","error","is_loggedin","checkTrip","text","values","trip","checkSeat","seat","createQuery","booking","data","user_id","bus_id","trip_date","first_name","last_name","getbookings","is_admin","Boolean","checkBookings","message","deleteBooking","params","bookingId","checkBooking","cancelTrip","tripId","updateTrip","changeSeats","checknumber","seats","changeSeat","changed"],"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport pool from '../models/db/db';\r\n\r\nconst Book = {\r\n  async makeBooking(req, res) {\r\n    try {\r\n      const { email, id } = req.user;\r\n      const { trip_id } = req.body;\r\n      let { seat_number } = req.body;\r\n      if (!seat_number) {\r\n        seat_number = Math.floor(Math.random() * 18) + 1;\r\n      }\r\n      const checkUser = 'SELECT * FROM users WHERE email = $1';\r\n      const { rows } = await pool.query(checkUser, [email]);\r\n\r\n      if (!rows[0]) res.status(401).json({ status: 401, error: 'Please sign up' });\r\n      if (rows[0].is_loggedin === false) res.status(401).json({ status: 401, error: 'You must be logged in to book a trip' });\r\n\r\n      const status = 'active';\r\n      const checkTrip = {\r\n        text: 'SELECT * FROM trip where id = $1 AND status = $2',\r\n        values: [trip_id, status],\r\n      };\r\n      const { rows: trip } = await pool.query(checkTrip);\r\n      if (!trip[0]) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'trip not available',\r\n        });\r\n      }\r\n\r\n      const checkSeat = {\r\n        text: 'SELECT * FROM booking where trip_id = $1 AND seat_number = $2',\r\n        values: [trip_id, seat_number],\r\n      };\r\n      const { rows: seat } = await pool.query(checkSeat);\r\n      if (seat[0]) return res.status(409).json({ status: 409, error: 'Seat number already taken' });\r\n\r\n      const createQuery = {\r\n        text: 'INSERT INTO booking(trip_id, user_id, seat_number) VALUES($1, $2, $3) RETURNING *',\r\n        values: [trip_id, id, seat_number],\r\n      };\r\n      const { rows: booking } = await pool.query(createQuery);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        data: {\r\n          id: booking[0].id,\r\n          user_id: rows[0].user_id,\r\n          trip_id: trip[0].id,\r\n          bus_id: trip[0].bus_id,\r\n          trip_date: trip[0].trip_date,\r\n          seat_number: booking[0].seat_number,\r\n          first_name: rows[0].first_name,\r\n          last_name: rows[0].last_name,\r\n          email: rows[0].email,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({ status: 500, error: 'Internal server error' });\r\n    }\r\n  },\r\n\r\n  async getbookings(req, res) {\r\n    try {\r\n      const { is_admin, id } = req.user;\r\n      if (is_admin === Boolean(true)) {\r\n        const checkBookings = {\r\n          text: `SELECT \r\n        booking.id AS booking_id,booking.user_id, booking.seat_number, booking.trip_id, \r\n        trip.bus_id, trip.origin, trip.destination, trip.trip_date, trip.status,\r\n        users.first_name, users.last_name, users.email\r\n        FROM booking JOIN trip ON (booking.trip_id = trip.id) JOIN users ON (booking.user_id = users.id)`,\r\n        };\r\n        const { rows } = await pool.query(checkBookings);\r\n        if (!rows[0]) {\r\n          return res.status(404).json({\r\n            status: 404,\r\n            error: 'No booking found',\r\n          });\r\n        }\r\n        return res.status(200).json({\r\n          status: 'success',\r\n          data: rows,\r\n        });\r\n      }\r\n      const checkBookings = {\r\n        text: `SELECT \r\n      booking.id AS booking_id,booking.user_id, booking.seat_number, booking.trip_id, \r\n      trip.bus_id, trip.origin, trip.destination, trip.trip_date, trip.status,\r\n      users.first_name, users.last_name, users.email\r\n      FROM booking JOIN trip ON (booking.trip_id = trip.id) JOIN users ON (booking.user_id = users.id) WHERE user_id = $1`,\r\n        values: [id],\r\n      };\r\n      const { rows } = await pool.query(checkBookings);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'No booking found',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: rows,\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n  async deleteBooking(req, res) {\r\n    try {\r\n      const { bookingId } = req.params;\r\n\r\n      const { id } = req.user;\r\n      const checkBooking = {\r\n        text: 'SELECT * FROM booking where id = $1 AND user_id = $2',\r\n        values: [bookingId, id],\r\n      };\r\n      const { rows } = await pool.query(checkBooking);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({\r\n          status: 400,\r\n          error: 'No booking found',\r\n        });\r\n      }\r\n      const deleteBooking = {\r\n        text: 'DELETE FROM booking WHERE id = $1 AND user_id = $2',\r\n        values: [bookingId, id],\r\n      };\r\n      await pool.query(deleteBooking);\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          message: 'booking successfully deleted',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n  async cancelTrip(req, res) {\r\n    try {\r\n      const { tripId } = req.params;\r\n      const checkTrip = {\r\n        text: 'SELECT * FROM trips WHERE id = $1 and status = $2',\r\n        values: [tripId, 'active'],\r\n      };\r\n      const { rows } = await pool.query(checkTrip);\r\n      if (!rows[0]) {\r\n        return res.status(400).json({\r\n          status: 400,\r\n          error: 'Not an active trip',\r\n        });\r\n      }\r\n      const updateTrip = {\r\n        text: \"UPDATE trips SET status = 'cancelled' WHERE id = $1\",\r\n        values: [tripId],\r\n      };\r\n      await pool.query(updateTrip);\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          message: 'Trip cancelled successfully',\r\n        },\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n  async changeSeats(req, res) {\r\n    try {\r\n      const { email, id: user_id } = req.user;\r\n      const { bookingId } = req.params;\r\n      const { seat_number } = req.body;\r\n\r\n      const checkBooking = {\r\n        text: 'SELECT * FROM booking where id = $1 AND user_id = $2',\r\n        values: [bookingId, user_id],\r\n      };\r\n      const { rows } = await pool.query(checkBooking);\r\n      if (!rows[0]) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'No booking found',\r\n        });\r\n      }\r\n      const checknumber = {\r\n        text: 'SELECT * FROM booking where trip_id = $1  AND seat_number = $2',\r\n        values: [rows[0].trip_id, seat_number],\r\n      };\r\n      const { rows: seats } = await pool.query(checknumber);\r\n      if (seats[0]) {\r\n        return res.status(401).json({\r\n          status: 401,\r\n          error: 'seat already taken',\r\n        });\r\n      }\r\n\r\n      const changeSeat = {\r\n        text: 'UPDATE booking SET seat_number = $1 WHERE id = $2 RETURNING *',\r\n        values: [seat_number, bookingId],\r\n      };\r\n      const { rows: changed } = await pool.query(changeSeat);\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        data: {\r\n          bookingId,\r\n          user_id,\r\n          trip_id: changed[0].trip_id,\r\n          seat_number,\r\n          email,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        status: 500,\r\n        error: `Internal server error ${error.message}`,\r\n      });\r\n    }\r\n  },\r\n\r\n};\r\n\r\nexport default Book;\r\n"],"file":"bookController.js"}