{"version":3,"sources":["../../server/controllers/userController.js"],"names":["dotenv","config","process","env","secret","User","signUpUser","req","res","existingEmail","queryText","body","id","first_name","last_name","email","password","hashPassword","bcrypt","hashSync","values","pool","query","rows","status","json","error","rowsInsert","token","jwt","sign","expiresIn","data","user_id","is_admin","logInUser","comparePassword","compareSync","updateText","rowsUpdate","is_loggedin"],"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","sourcesContent":["import dotenv from 'dotenv';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport pool from '../models/db/db';\r\n\r\n\r\ndotenv.config();\r\nconst { secret } = process.env;\r\n\r\nconst User = {\r\n  async signUpUser(req, res) {\r\n    const existingEmail = 'SELECT * FROM users WHERE email = $1';\r\n    const queryText = 'INSERT INTO users(first_name, last_name, email, password) VALUES($1, $2, $3, $4) RETURNING *';\r\n\r\n    // eslint-disable-next-line camelcase\r\n    const { id, first_name, last_name, email, password } = req.body;\r\n    const hashPassword = bcrypt.hashSync(password, 10);\r\n    // eslint-disable-next-line camelcase\r\n    const values = [first_name, last_name, email, hashPassword];\r\n    const { rows } = await pool.query(existingEmail, [email]);\r\n\r\n    if (rows[0] && rows[0].email === email) return res.status(400).json({ status: 'error', error: 'User already exists' });\r\n\r\n    try {\r\n      const { rows: rowsInsert } = await pool.query(queryText, values);\r\n      const token = jwt.sign({ id, email }, secret, { expiresIn: '1024hrs' });\r\n      return res.status(201).json({\r\n        status: 'success',\r\n        data: {\r\n          user_id: rowsInsert[0].id,\r\n          is_admin: rowsInsert[0].is_admin,\r\n          token,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      return res.status(500).json({ status: 'error', error: 'Server error' });\r\n    }\r\n  },\r\n\r\n  async logInUser(req, res) {\r\n    const { email, password } = req.body;\r\n    const queryText = 'SELECT * FROM users WHERE email = $1';\r\n    const { rows } = await pool.query(queryText, [email]);\r\n    // check if user exist in database\r\n    if (!rows[0].email) return res.status(401).json({ status: 'error', error: 'Email and/or password is incorrect' });\r\n    const comparePassword = bcrypt.compareSync(password, rows[0].password);\r\n    if (!comparePassword) return res.status(401).json({ status: 'error', error: 'Password incorrect' });\r\n\r\n    try {\r\n      const updateText = 'UPDATE users SET is_loggedin = true WHERE email=$1 RETURNING *';\r\n      const { rows: rowsUpdate } = await pool.query(updateText, [email]);\r\n      const token = jwt.sign({ id: rows[0].id, email }, secret, { expiresIn: '1024hrs' });\r\n\r\n      return res.status(200).json({\r\n        status: 'success',\r\n        data: {\r\n          user_id: rowsUpdate[0].id,\r\n          is_admin: rowsUpdate[0].is_admin,\r\n          is_loggedin: rowsUpdate[0].is_loggedin,\r\n          token,\r\n        },\r\n      });\r\n    } catch (e) {\r\n      return res.status(500).json({\r\n        status: '500',\r\n        error: 'Internal server error',\r\n      });\r\n    }\r\n  },\r\n\r\n};\r\n\r\nexport default User;\r\n"],"file":"userController.js"}